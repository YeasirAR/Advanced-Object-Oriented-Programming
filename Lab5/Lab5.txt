Topic 1:


package Lab5;

public class Printer {
    // Different threads will call this method. But we don't
    // want a thread to switch once the thread starts this method.
    void print1(){
        for(int i = 0; i < 10; i++){
            String threadName = Thread.currentThread().getName();
            System.out.println(threadName + " " + i);
            try{
                Thread.sleep(20);
            }
            catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    }
}






package Lab5;

public class Program implements Runnable {
    final Printer printer;
    // Shared resource printer is passed using constructor.

    Program(Printer printer){
        this.printer = printer;
    }

    @Override
    public void run() {
        // synchronized will get a lock on the printer object. Once a thread gets a lock,
        // other threads will have to wait for that thread to finish.
        synchronized (printer) {
            System.out.println(printer.toString());
            printer.print1();
        }
    }
}

class Main{
    public static void main(String[] args) {
        Printer printer = new Printer();
        // printer object is a shared resource. Multiple threads share this object.


        // Creating multiple threads with the shared resource.
        Thread t1 = new Thread(new Program(printer), "Program 1");
        Thread t2 = new Thread(new Program(printer), "Program 2");
        Thread t3 = new Thread(new Program(printer), "Program 3");

        t1.start();
        t2.start();
        t3.start();

        try{
            t1.join();
            t2.join();
            t3.join();
        }
        catch (InterruptedException e){
            e.printStackTrace();
        }
    }
}













Topic 2:

package Lab5;

public class Q {
    int num;
    boolean flag = false;
    // flag true means there is a new value
    // flag false means, consumer received the value, or no value was set

    synchronized void put(int num){
        // put will wait until the flag becomes false,
        // that is until the consumer receives the previous value
        while(flag){
            try{
                wait(); // puts the current thread in sleep, until another thread wakes it up
            }
            catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        this.num = num;
        flag = true;
        notify();  // Wakes up a single thread that is waiting on this object's monitor.
    }

    synchronized int get(){
        // get will wait until the flag becomes true,
        // that is until the producer puts a new value
        while(!flag){
            try{
                wait();
            }
            catch (InterruptedException e){
                e.printStackTrace();
            }
        }
        flag = false;
        int ret = num;
        notify();
        return ret;
    }
}



package Lab5;

public class Producer implements Runnable{
    Q qObject;

    Producer(Q qObject){
        this.qObject = qObject;
    }

    @Override
    public void run() {
        for(int i = 0; i < 20; i++){
            qObject.put(i);
        }
    }
}



package Lab5;

public class Consumer implements Runnable {
    Q qObject;

    Consumer(Q qObject){
        this.qObject = qObject;
    }

    @Override
    public void run() {
        for(int i = 0; i < 20; i++){
            int val = qObject.get();
            System.out.println("Value is: " + val);
        }
    }
}



package Lab5;

public class Main2 {
    public static void main(String[] args) {
        Q obj = new Q();
        Thread con = new Thread(new Consumer(obj), "Consumer");
        Thread pro = new Thread(new Producer(obj), "Producer");
        pro.start();
        con.start();
        try{
            con.join(); pro.join();
        }
        catch (InterruptedException e){
            e.printStackTrace();
        }
    }
}









